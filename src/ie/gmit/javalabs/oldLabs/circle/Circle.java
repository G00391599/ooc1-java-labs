package ie.gmit.javalabs.oldLabs.circle;

/* Design and develop a class to implement the circle shape, 
   the class should implement methods to update the circle's size, 
   calculate circle circumference and calculate circle area.
*/


public class Circle { //public access modifier so other classes can acces this class
	
	// The static keyword in Java means that the variable is shared between all instances of that class as it belongs to the type, not the actual objects themselves. So if you have a variable: private static int i = 0; and you increment it ( i++ ) in one instance, the change will be reflected in all instances.
    // pi is a universal constant, about as constant as anything can be.
    public static final double PI = 3.141592653589793;
	
	/// Class Attributes
	private float radius;
	
	// Constructor method
	// Constructors are used to initialize the instances of your classes. 
	// Constructors have the same name as their class
	// A class contains constructors that are invoked to create objects from the class blueprint.
	// If the Java program follows normal conventions, methods will start with a lower case letter, constructors with an upper case letter.
	// When the object is created, Java calls the constructor first. Any code you have in your constructor will then get executed. You don't need to make any special calls to a constructor method - they happen automatically when you create a new object.
	// Unlike normal methods, class constructors don't need a return type like int or double, nor any return value. 
	// It is not required to explicitly define a constructor; however, all classes must have a constructor, and a default empty constructor will be generated if you don't provide any:
	public Circle(float initalRadius)
	{
		radius = initalRadius;
	}
	
	// Method to change circle radius - has new radius as a parameter
	public float updateCircleRadius(float newRadius)
	{
		radius = newRadius;
		return radius;
	}
	
	// Method to calculate the circles circumference: Circumference = PI × diameter = 2 × PI × radius
	public float calculateCircumference()
	{
		float circumference;
		
		// Answer casted to float as a double is generated by 3.14*2*radius
		circumference = (float) (2*PI*radius);
		
		return circumference;
	}
	
	// Method to calculate the circles area
	public float calculateArea()
	{
		float area;
		
		/// Answer casted to float as a double is generated by PI r^2 (i.e. 3.14*radius*radius)
		area = (float) (PI*radius*radius);
		
		return area;
	}
		
}